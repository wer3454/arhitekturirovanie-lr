services:
   # Сервис для вашего приложения
   user-service:
      build:
         context: ../user-service  # Указывает на корень проекта, где находится директория user-service
         dockerfile: Dockerfile  # Путь к Dockerfile в директории user-service
      container_name: user-service
      environment:
         SPRING_DATA_REDIS_HOST: keydb
         SPRING_RABBITMQ_HOST: rabbitmq
         SPRING_DATASOURCE_URL: 'jdbc:postgresql://postgres:5432/apidemo-db'
      ports:
         - "8080:8080"  # Пробрасывание порта для доступа к вашему приложению

   # Сервис для вашего приложения
   notification-service:
      build:
         context: ../notification-service  # Указывает на корень проекта, где находится директория user-service
         dockerfile: Dockerfile  # Путь к Dockerfile в директории user-service
      container_name: notification-service
      environment:
         SPRING_RABBITMQ_HOST: rabbitmq

   postgres:
      image: postgres:13.3
      container_name: postgres-lab3
      environment:
         POSTGRES_DB: "apidemo-db"
         POSTGRES_USER: "postgres"
         POSTGRES_PASSWORD: "postgres"
         PGDATA: "/var/lib/postgresql/data/pgdata"
      ports:
         - "5432:5432"
      volumes:
         - .:/var/lib/postgresql/data
      restart: always

   keydb:
      image: "eqalpha/keydb:x86_64_v5.3.3"
      container_name: keydb-lab3
      command: "keydb-server /etc/keydb/redis.conf --server-threads 2"
      volumes:
         #      - "./redis.conf:/etc/keydb/redis.conf"
         - "data:/data"
      ports:
         - "6379:6379"
      restart: unless-stopped

   rabbitmq:
      image: "rabbitmq:3-management"
      container_name: rabbitmq-archapp-lab4
      ports:
         - "5672:5672"
         - "15672:15672"
         - "15692:15692"  # По этому порту Prometheus может получить метрики
      environment:
         RABBITMQ_DEFAULT_USER: guest
         RABBITMQ_DEFAULT_PASS: guest
         RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbitmq_prometheus true" # Включает плагин для отдачи метрик
      volumes:
         - ./rabbitmq-data:/var/lib/rabbitmq

   # Сервис Prometheus
   prometheus:
      image: prom/prometheus:v2.44.0
      container_name: prometheus-archapp-lab4
      ports:
         - "9090:9090"   # Prometheus web UI
      volumes:
         - ./prometheus.yml:/etc/prometheus/prometheus.yml  # Конфигурационный файл
         - ./alert_rules.yml:/etc/prometheus/alert_rules.yml  # Файл с алертами

   # Сервис Grafana
   grafana:
      image: grafana/grafana
      container_name: grafana-archapp-lab4
      ports:
         - "3000:3000"   # Grafana web UI
      environment:
         - GF_SECURITY_ADMIN_PASSWORD=admin  # Пароль администратора
      volumes:
         - grafana-data:/var/lib/grafana
      depends_on:
         - prometheus  # Дожидается прометея

   # Сервис Alertmanager
   alertmanager:
      image: prom/alertmanager:v0.24.0
      container_name: alertmanager-archapp-lab4
      ports:
         - "9093:9093"   # Alertmanager web UI
      volumes:
         - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml  # Конфигурационный файл

   # Тестовый SMTP сервер
   mailhog:
      image: mailhog/mailhog
      container_name: mailhog
      ports:
         - "1025:1025"  # SMTP
         - "8025:8025"  # Web UI

volumes:
   data:
      driver: local
   grafana-data: